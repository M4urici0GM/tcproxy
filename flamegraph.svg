<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="629.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="46514"><g><title>ntdll`LdrGetProcedureAddressEx (6 samples, 0.01%)</title><rect x="0.0064%" y="517" width="0.0129%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="6"/><text x="0.2564%" y="527.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (6 samples, 0.01%)</title><rect x="0.0064%" y="501" width="0.0129%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="6"/><text x="0.2564%" y="511.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (6 samples, 0.01%)</title><rect x="0.0064%" y="485" width="0.0129%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="6"/><text x="0.2564%" y="495.50"></text></g><g><title>ntdll`LdrShutdownThread (6 samples, 0.01%)</title><rect x="0.0193%" y="421" width="0.0129%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="6"/><text x="0.2693%" y="431.50"></text></g><g><title>ntdll`LdrUnloadAlternateResourceModuleEx (8 samples, 0.02%)</title><rect x="0.0193%" y="469" width="0.0172%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="8"/><text x="0.2693%" y="479.50"></text></g><g><title>ntdll`RtlReleaseActivationContext (8 samples, 0.02%)</title><rect x="0.0193%" y="453" width="0.0172%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="8"/><text x="0.2693%" y="463.50"></text></g><g><title>ntdll`RtlIsCriticalSectionLockedByThread (8 samples, 0.02%)</title><rect x="0.0193%" y="437" width="0.0172%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="8"/><text x="0.2693%" y="447.50"></text></g><g><title>ntdll`LdrLoadDll (13 samples, 0.03%)</title><rect x="0.0193%" y="517" width="0.0279%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="13"/><text x="0.2693%" y="527.50"></text></g><g><title>ntdll`RtlDosPathNameToNtPathName_U (13 samples, 0.03%)</title><rect x="0.0193%" y="501" width="0.0279%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="13"/><text x="0.2693%" y="511.50"></text></g><g><title>ntdll`RtlGetFullPathName_UstrEx (13 samples, 0.03%)</title><rect x="0.0193%" y="485" width="0.0279%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="13"/><text x="0.2693%" y="495.50"></text></g><g><title>ntdll`RtlSwitchedVVI (5 samples, 0.01%)</title><rect x="0.0365%" y="469" width="0.0107%" height="15" fill="rgb(250,228,42)" fg:x="17" fg:w="5"/><text x="0.2865%" y="479.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (30 samples, 0.06%)</title><rect x="0.0043%" y="533" width="0.0645%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="30"/><text x="0.2543%" y="543.50"></text></g><g><title>ntdll`LdrInitializeThunk (34 samples, 0.07%)</title><rect x="0.0000%" y="581" width="0.0731%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="34"/><text x="0.2500%" y="591.50"></text></g><g><title>ntdll`LdrInitializeThunk (32 samples, 0.07%)</title><rect x="0.0043%" y="565" width="0.0688%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="32"/><text x="0.2543%" y="575.50"></text></g><g><title>ntdll`LdrInitializeThunk (32 samples, 0.07%)</title><rect x="0.0043%" y="549" width="0.0688%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="32"/><text x="0.2543%" y="559.50"></text></g><g><title>client`mio::sys::windows::tcp::connect (11 samples, 0.02%)</title><rect x="0.1182%" y="341" width="0.0236%" height="15" fill="rgb(231,73,38)" fg:x="55" fg:w="11"/><text x="0.3682%" y="351.50"></text></g><g><title>WS2_32`connect (11 samples, 0.02%)</title><rect x="0.1182%" y="325" width="0.0236%" height="15" fill="rgb(225,20,46)" fg:x="55" fg:w="11"/><text x="0.3682%" y="335.50"></text></g><g><title>`0x7FF8DCA02D50 (11 samples, 0.02%)</title><rect x="0.1182%" y="309" width="0.0236%" height="15" fill="rgb(210,31,41)" fg:x="55" fg:w="11"/><text x="0.3682%" y="319.50"></text></g><g><title>`0x7FF8DCA03150 (10 samples, 0.02%)</title><rect x="0.1204%" y="293" width="0.0215%" height="15" fill="rgb(221,200,47)" fg:x="56" fg:w="10"/><text x="0.3704%" y="303.50"></text></g><g><title>`0x7FF8DCA02CC2 (9 samples, 0.02%)</title><rect x="0.1225%" y="277" width="0.0193%" height="15" fill="rgb(226,26,5)" fg:x="57" fg:w="9"/><text x="0.3725%" y="287.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (9 samples, 0.02%)</title><rect x="0.1225%" y="261" width="0.0193%" height="15" fill="rgb(249,33,26)" fg:x="57" fg:w="9"/><text x="0.3725%" y="271.50"></text></g><g><title>client`std::lazy::SyncOnceCell::initialize&lt;i32 (*)(),std::lazy::impl$10::get_or_init::closure_env$0&lt;i32 (*) (6 samples, 0.01%)</title><rect x="0.1483%" y="261" width="0.0129%" height="15" fill="rgb(235,183,28)" fg:x="69" fg:w="6"/><text x="0.3983%" y="271.50"></text></g><g><title>client`std::sync::once::Once::call_inner (6 samples, 0.01%)</title><rect x="0.1483%" y="245" width="0.0129%" height="15" fill="rgb(221,5,38)" fg:x="69" fg:w="6"/><text x="0.3983%" y="255.50"></text></g><g><title>client`std::sync::once::impl$4::call_once_force::closure$0&lt;std::lazy::impl$10::initialize::closure_env$0&lt;i32 (*)(),std::lazy::impl$10::get_or_init::closure_env$0&lt;i32 (*) (6 samples, 0.01%)</title><rect x="0.1483%" y="229" width="0.0129%" height="15" fill="rgb(247,18,42)" fg:x="69" fg:w="6"/><text x="0.3983%" y="239.50"></text></g><g><title>WS2_32`WSAStartup (6 samples, 0.01%)</title><rect x="0.1483%" y="213" width="0.0129%" height="15" fill="rgb(241,131,45)" fg:x="69" fg:w="6"/><text x="0.3983%" y="223.50"></text></g><g><title>WS2_32`WSALookupServiceNextW (6 samples, 0.01%)</title><rect x="0.1483%" y="197" width="0.0129%" height="15" fill="rgb(249,31,29)" fg:x="69" fg:w="6"/><text x="0.3983%" y="207.50"></text></g><g><title>WS2_32`WSALookupServiceNextW (6 samples, 0.01%)</title><rect x="0.1483%" y="181" width="0.0129%" height="15" fill="rgb(225,111,53)" fg:x="69" fg:w="6"/><text x="0.3983%" y="191.50"></text></g><g><title>WS2_32`WSALookupServiceNextW (6 samples, 0.01%)</title><rect x="0.1483%" y="165" width="0.0129%" height="15" fill="rgb(238,160,17)" fg:x="69" fg:w="6"/><text x="0.3983%" y="175.50"></text></g><g><title>WS2_32`WSALookupServiceNextW (5 samples, 0.01%)</title><rect x="0.1505%" y="149" width="0.0107%" height="15" fill="rgb(214,148,48)" fg:x="70" fg:w="5"/><text x="0.4005%" y="159.50"></text></g><g><title>WS2_32`WSALookupServiceNextW (5 samples, 0.01%)</title><rect x="0.1505%" y="133" width="0.0107%" height="15" fill="rgb(232,36,49)" fg:x="70" fg:w="5"/><text x="0.4005%" y="143.50"></text></g><g><title>client`mio::net::tcp::stream::TcpStream::connect (25 samples, 0.05%)</title><rect x="0.1182%" y="357" width="0.0537%" height="15" fill="rgb(209,103,24)" fg:x="55" fg:w="25"/><text x="0.3682%" y="367.50"></text></g><g><title>client`mio::sys::windows::tcp::new_for_addr (14 samples, 0.03%)</title><rect x="0.1419%" y="341" width="0.0301%" height="15" fill="rgb(229,88,8)" fg:x="66" fg:w="14"/><text x="0.3919%" y="351.50"></text></g><g><title>client`std::sync::once::Once::call_inner (11 samples, 0.02%)</title><rect x="0.1483%" y="325" width="0.0236%" height="15" fill="rgb(213,181,19)" fg:x="69" fg:w="11"/><text x="0.3983%" y="335.50"></text></g><g><title>client`std::sync::once::impl$4::call_once::closure$0 (11 samples, 0.02%)</title><rect x="0.1483%" y="309" width="0.0236%" height="15" fill="rgb(254,191,54)" fg:x="69" fg:w="11"/><text x="0.3983%" y="319.50"></text></g><g><title>client`std::net::udp::UdpSocket::bind (11 samples, 0.02%)</title><rect x="0.1483%" y="293" width="0.0236%" height="15" fill="rgb(241,83,37)" fg:x="69" fg:w="11"/><text x="0.3983%" y="303.50"></text></g><g><title>client`std::sys_common::net::UdpSocket::bind (11 samples, 0.02%)</title><rect x="0.1483%" y="277" width="0.0236%" height="15" fill="rgb(233,36,39)" fg:x="69" fg:w="11"/><text x="0.3983%" y="287.50"></text></g><g><title>client`std::sys::windows::net::Socket::new (5 samples, 0.01%)</title><rect x="0.1612%" y="261" width="0.0107%" height="15" fill="rgb(226,3,54)" fg:x="75" fg:w="5"/><text x="0.4112%" y="271.50"></text></g><g><title>WS2_32`WSASocketW (5 samples, 0.01%)</title><rect x="0.1612%" y="245" width="0.0107%" height="15" fill="rgb(245,192,40)" fg:x="75" fg:w="5"/><text x="0.4112%" y="255.50"></text></g><g><title>client`core::future::from_generator::impl$1::poll&lt;enum$&lt;tokio::net::tcp::stream::impl$0::connect::async_fn_env$0 (27 samples, 0.06%)</title><rect x="0.1182%" y="373" width="0.0580%" height="15" fill="rgb(238,167,29)" fg:x="55" fg:w="27"/><text x="0.3682%" y="383.50"></text></g><g><title>KERNEL32`HeapFree (68 samples, 0.15%)</title><rect x="0.4386%" y="325" width="0.1462%" height="15" fill="rgb(232,182,51)" fg:x="204" fg:w="68"/><text x="0.6886%" y="335.50"></text></g><g><title>client`_rust_alloc (7 samples, 0.02%)</title><rect x="0.5848%" y="325" width="0.0150%" height="15" fill="rgb(231,60,39)" fg:x="272" fg:w="7"/><text x="0.8348%" y="335.50"></text></g><g><title>client`bytes::bytes_mut::impl$1::drop (20 samples, 0.04%)</title><rect x="0.5998%" y="325" width="0.0430%" height="15" fill="rgb(208,69,12)" fg:x="279" fg:w="20"/><text x="0.8498%" y="335.50"></text></g><g><title>client`std::alloc::__default_lib_allocator::__rdl_alloc (79 samples, 0.17%)</title><rect x="0.6450%" y="325" width="0.1698%" height="15" fill="rgb(235,93,37)" fg:x="300" fg:w="79"/><text x="0.8950%" y="335.50"></text></g><g><title>client`std::alloc::__default_lib_allocator::__rdl_dealloc (53 samples, 0.11%)</title><rect x="0.8148%" y="325" width="0.1139%" height="15" fill="rgb(213,116,39)" fg:x="379" fg:w="53"/><text x="1.0648%" y="335.50"></text></g><g><title>client`regex_syntax::hir::Hir::kind (20 samples, 0.04%)</title><rect x="1.7199%" y="309" width="0.0430%" height="15" fill="rgb(222,207,29)" fg:x="800" fg:w="20"/><text x="1.9699%" y="319.50"></text></g><g><title>KERNEL32`BasepGetPackageActivationTokenForSxS (5 samples, 0.01%)</title><rect x="2.9131%" y="213" width="0.0107%" height="15" fill="rgb(206,96,30)" fg:x="1355" fg:w="5"/><text x="3.1631%" y="223.50"></text></g><g><title>KERNEL32`TlsGetValue (6 samples, 0.01%)</title><rect x="2.9239%" y="213" width="0.0129%" height="15" fill="rgb(218,138,4)" fg:x="1360" fg:w="6"/><text x="3.1739%" y="223.50"></text></g><g><title>WS2_32`getpeername (410 samples, 0.88%)</title><rect x="2.9453%" y="213" width="0.8815%" height="15" fill="rgb(250,191,14)" fg:x="1370" fg:w="410"/><text x="3.1953%" y="223.50"></text></g><g><title>KERNEL32`BasepGetPackageActivationTokenForSxS (5 samples, 0.01%)</title><rect x="4.3557%" y="197" width="0.0107%" height="15" fill="rgb(239,60,40)" fg:x="2026" fg:w="5"/><text x="4.6057%" y="207.50"></text></g><g><title>client`mio::net::tcp::stream::impl$2::read (43,623 samples, 93.78%)</title><rect x="2.2552%" y="277" width="93.7847%" height="15" fill="rgb(206,27,48)" fg:x="1049" fg:w="43623"/><text x="2.5052%" y="287.50">client`mio::net::tcp::stream::impl$2::read</text></g><g><title>client`mio::sys::windows::IoSourceState::do_io (43,599 samples, 93.73%)</title><rect x="2.3068%" y="261" width="93.7331%" height="15" fill="rgb(225,35,8)" fg:x="1073" fg:w="43599"/><text x="2.5568%" y="271.50">client`mio::sys::windows::IoSourceState::do_io</text></g><g><title>client`std::net::tcp::impl$3::read (43,490 samples, 93.50%)</title><rect x="2.5412%" y="245" width="93.4987%" height="15" fill="rgb(250,213,24)" fg:x="1182" fg:w="43490"/><text x="2.7912%" y="255.50">client`std::net::tcp::impl$3::read</text></g><g><title>WS2_32`recv (43,446 samples, 93.40%)</title><rect x="2.6358%" y="229" width="93.4041%" height="15" fill="rgb(247,123,22)" fg:x="1226" fg:w="43446"/><text x="2.8858%" y="239.50">WS2_32`recv</text></g><g><title>mswsock`NSPStartup (42,892 samples, 92.21%)</title><rect x="3.8268%" y="213" width="92.2131%" height="15" fill="rgb(231,138,38)" fg:x="1780" fg:w="42892"/><text x="4.0768%" y="223.50">mswsock`NSPStartup</text></g><g><title>ntdll`NtDeviceIoControlFile (42,638 samples, 91.67%)</title><rect x="4.3729%" y="197" width="91.6670%" height="15" fill="rgb(231,145,46)" fg:x="2034" fg:w="42638"/><text x="4.6229%" y="207.50">ntdll`NtDeviceIoControlFile</text></g><g><title>client`tokio::coop::CURRENT::__getit (21 samples, 0.05%)</title><rect x="96.6075%" y="261" width="0.0451%" height="15" fill="rgb(251,118,11)" fg:x="44936" fg:w="21"/><text x="96.8575%" y="271.50"></text></g><g><title>client`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (69 samples, 0.15%)</title><rect x="96.6526%" y="261" width="0.1483%" height="15" fill="rgb(217,147,25)" fg:x="44957" fg:w="69"/><text x="96.9026%" y="271.50"></text></g><g><title>client`tokio::io::util::read_buf::impl$0::poll (44,596 samples, 95.88%)</title><rect x="0.9288%" y="325" width="95.8765%" height="15" fill="rgb(247,81,37)" fg:x="432" fg:w="44596"/><text x="1.1788%" y="335.50">client`tokio::io::util::read_buf::impl$0::poll</text></g><g><title>client`tokio::net::tcp::split_owned::impl$3::poll_read (44,208 samples, 95.04%)</title><rect x="1.7629%" y="309" width="95.0424%" height="15" fill="rgb(209,12,38)" fg:x="820" fg:w="44208"/><text x="2.0129%" y="319.50">client`tokio::net::tcp::split_owned::impl$3::poll_read</text></g><g><title>client`tokio::io::driver::registration::Registration::poll_read_io&lt;usize,tokio::io::poll_evented::impl$6::poll_read::closure_env$0 (44,118 samples, 94.85%)</title><rect x="1.9564%" y="293" width="94.8489%" height="15" fill="rgb(227,1,9)" fg:x="910" fg:w="44118"/><text x="2.2064%" y="303.50">client`tokio::io::driver::registration::Registration::poll_read_io&lt;usize,tokio::io::poll_evented::impl$6::poll_read::closure_env$0</text></g><g><title>client`tokio::io::driver::registration::Registration::poll_ready (356 samples, 0.77%)</title><rect x="96.0399%" y="277" width="0.7654%" height="15" fill="rgb(248,47,43)" fg:x="44672" fg:w="356"/><text x="96.2899%" y="287.50"></text></g><g><title>ntdll`RtlCreateTimer (18 samples, 0.04%)</title><rect x="98.0500%" y="293" width="0.0387%" height="15" fill="rgb(221,10,30)" fg:x="45607" fg:w="18"/><text x="98.3000%" y="303.50"></text></g><g><title>ntdll`RtlAllocateHeap (695 samples, 1.49%)</title><rect x="96.8074%" y="325" width="1.4942%" height="15" fill="rgb(210,229,1)" fg:x="45029" fg:w="695"/><text x="97.0574%" y="335.50"></text></g><g><title>ntdll`RtlAllocateHeap (440 samples, 0.95%)</title><rect x="97.3556%" y="309" width="0.9460%" height="15" fill="rgb(222,148,37)" fg:x="45284" fg:w="440"/><text x="97.6056%" y="319.50"></text></g><g><title>ntdll`RtlSetUserValueHeap (99 samples, 0.21%)</title><rect x="98.0887%" y="293" width="0.2128%" height="15" fill="rgb(234,67,33)" fg:x="45625" fg:w="99"/><text x="98.3387%" y="303.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (173 samples, 0.37%)</title><rect x="98.6843%" y="309" width="0.3719%" height="15" fill="rgb(247,98,35)" fg:x="45902" fg:w="173"/><text x="98.9343%" y="319.50"></text></g><g><title>ntdll`RtlFreeHeap (18 samples, 0.04%)</title><rect x="99.0175%" y="293" width="0.0387%" height="15" fill="rgb(247,138,52)" fg:x="46057" fg:w="18"/><text x="99.2675%" y="303.50"></text></g><g><title>client`futures_util::stream::stream::StreamExt::poll_next_unpin&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;async_stream::async_stream::AsyncStream&lt;enum$&lt;tcproxy::codec::tcp_stream::TcpFrame&gt;,core::future::from_generator::GenFuture&lt;enum$ (46,255 samples, 99.44%)</title><rect x="0.1892%" y="357" width="99.4432%" height="15" fill="rgb(213,79,30)" fg:x="88" fg:w="46255"/><text x="0.4392%" y="367.50">client`futures_util::stream::stream::StreamExt::poll_next_unpin&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;async_stream::async_stream::AsyncStream&lt;enum$&lt;tcproxy::codec::tcp_str..</text></g><g><title>client`core::future::from_generator::impl$1::poll&lt;enum$ (46,249 samples, 99.43%)</title><rect x="0.2021%" y="341" width="99.4303%" height="15" fill="rgb(246,177,23)" fg:x="94" fg:w="46249"/><text x="0.4521%" y="351.50">client`core::future::from_generator::impl$1::poll&lt;enum$</text></g><g><title>ntdll`RtlFreeHeap (619 samples, 1.33%)</title><rect x="98.3016%" y="325" width="1.3308%" height="15" fill="rgb(230,62,27)" fg:x="45724" fg:w="619"/><text x="98.5516%" y="335.50"></text></g><g><title>ntdll`memset (268 samples, 0.58%)</title><rect x="99.0562%" y="309" width="0.5762%" height="15" fill="rgb(216,154,8)" fg:x="46075" fg:w="268"/><text x="99.3062%" y="319.50"></text></g><g><title>client`tokio::io::util::read_buf::impl$0::poll (5 samples, 0.01%)</title><rect x="99.6474%" y="309" width="0.0107%" height="15" fill="rgb(244,35,45)" fg:x="46350" fg:w="5"/><text x="99.8974%" y="319.50"></text></g><g><title>client`tokio::net::tcp::split_owned::impl$3::poll_read (5 samples, 0.01%)</title><rect x="99.6474%" y="293" width="0.0107%" height="15" fill="rgb(251,115,12)" fg:x="46350" fg:w="5"/><text x="99.8974%" y="303.50"></text></g><g><title>client`std::io::stdio::impl$11::write_all (5 samples, 0.01%)</title><rect x="99.6603%" y="245" width="0.0107%" height="15" fill="rgb(240,54,50)" fg:x="46356" fg:w="5"/><text x="99.9103%" y="255.50"></text></g><g><title>client`std::io::stdio::impl$12::write_all (5 samples, 0.01%)</title><rect x="99.6603%" y="229" width="0.0107%" height="15" fill="rgb(233,84,52)" fg:x="46356" fg:w="5"/><text x="99.9103%" y="239.50"></text></g><g><title>client`std::io::stdio::impl$13::write_all (5 samples, 0.01%)</title><rect x="99.6603%" y="213" width="0.0107%" height="15" fill="rgb(207,117,47)" fg:x="46356" fg:w="5"/><text x="99.9103%" y="223.50"></text></g><g><title>client`std::io::Write::write_all (5 samples, 0.01%)</title><rect x="99.6603%" y="197" width="0.0107%" height="15" fill="rgb(249,43,39)" fg:x="46356" fg:w="5"/><text x="99.9103%" y="207.50"></text></g><g><title>client`std::sys::windows::stdio::write (5 samples, 0.01%)</title><rect x="99.6603%" y="181" width="0.0107%" height="15" fill="rgb(209,38,44)" fg:x="46356" fg:w="5"/><text x="99.9103%" y="191.50"></text></g><g><title>client`futures_core::stream::impl$1::poll_next&lt;alloc::boxed::Box&lt;async_stream::async_stream::AsyncStream&lt;enum$&lt;tcproxy::codec::tcp_stream::TcpFrame&gt;,core::future::from_generator::GenFuture&lt;enum$ (17 samples, 0.04%)</title><rect x="99.6367%" y="341" width="0.0365%" height="15" fill="rgb(236,212,23)" fg:x="46345" fg:w="17"/><text x="99.8867%" y="351.50"></text></g><g><title>client`core::future::from_generator::impl$1::poll&lt;enum$ (14 samples, 0.03%)</title><rect x="99.6431%" y="325" width="0.0301%" height="15" fill="rgb(242,79,21)" fg:x="46348" fg:w="14"/><text x="99.8931%" y="335.50"></text></g><g><title>client`tracing_core::event::Event::dispatch (7 samples, 0.02%)</title><rect x="99.6582%" y="309" width="0.0150%" height="15" fill="rgb(211,96,35)" fg:x="46355" fg:w="7"/><text x="99.9082%" y="319.50"></text></g><g><title>client`tracing_core::dispatcher::get_default&lt;tuple$ (7 samples, 0.02%)</title><rect x="99.6582%" y="293" width="0.0150%" height="15" fill="rgb(253,215,40)" fg:x="46355" fg:w="7"/><text x="99.9082%" y="303.50"></text></g><g><title>client`tracing_subscriber::fmt::impl$2::event&lt;tracing_subscriber::fmt::format::DefaultFields,tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,tracing_subscriber::fmt::time::SystemTime&gt;,tracing_subscriber::filter::env::EnvFilter,std::io::stdio::Stdout (*) (6 samples, 0.01%)</title><rect x="99.6603%" y="277" width="0.0129%" height="15" fill="rgb(211,81,21)" fg:x="46356" fg:w="6"/><text x="99.9103%" y="287.50"></text></g><g><title>client`std::thread::local::LocalKey&lt;core::cell::RefCell&lt;alloc::string::String&gt; &gt;::with&lt;core::cell::RefCell&lt;alloc::string::String&gt;,tracing_subscriber::fmt::fmt_layer::impl$11::on_event::closure_env$0&lt;tracing_subscriber::registry::sharded::Registry,tracing_subscriber::fmt::format::DefaultFields,tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,tracing_subscriber::fmt::time::SystemTime&gt;,std::io::stdio::Stdout (*)()&gt;,tuple$ (6 samples, 0.01%)</title><rect x="99.6603%" y="261" width="0.0129%" height="15" fill="rgb(208,190,38)" fg:x="46356" fg:w="6"/><text x="99.9103%" y="271.50"></text></g><g><title>client`futures_util::stream::stream::next::impl$3::poll&lt;tokio_stream::stream_map::StreamMap&lt;uuid::Uuid,core::pin::Pin&lt;alloc::boxed::Box&lt;async_stream::async_stream::AsyncStream&lt;enum$&lt;tcproxy::codec::tcp_stream::TcpFrame&gt;,core::future::from_generator::GenFuture&lt;enum$ (20 samples, 0.04%)</title><rect x="99.6324%" y="357" width="0.0430%" height="15" fill="rgb(235,213,38)" fg:x="46343" fg:w="20"/><text x="99.8824%" y="367.50"></text></g><g><title>client`tokio::future::poll_fn::impl$2::poll&lt;enum$&lt;client::main::async_block$0::__tokio_select_util::Out&lt;enum$&lt;core::option::Option&lt;tuple$&lt;uuid::Uuid,enum$&lt;tcproxy::codec::tcp_stream::TcpFrame&gt; &gt; &gt;, 0, 9, Some&gt;,enum$&lt;core::option::Option&lt;enum$ (46,283 samples, 99.50%)</title><rect x="0.1784%" y="373" width="99.5034%" height="15" fill="rgb(237,122,38)" fg:x="83" fg:w="46283"/><text x="0.4284%" y="383.50">client`tokio::future::poll_fn::impl$2::poll&lt;enum$&lt;client::main::async_block$0::__tokio_select_util::Out&lt;enum$&lt;core::option::Option&lt;tuple$&lt;uuid::Uuid,enum$&lt;tcproxy::co..</text></g><g><title>KERNELBASE`WriteConsoleW (10 samples, 0.02%)</title><rect x="99.6904%" y="213" width="0.0215%" height="15" fill="rgb(244,218,35)" fg:x="46370" fg:w="10"/><text x="99.9404%" y="223.50"></text></g><g><title>KERNELBASE`WriteConsoleW (10 samples, 0.02%)</title><rect x="99.6904%" y="197" width="0.0215%" height="15" fill="rgb(240,68,47)" fg:x="46370" fg:w="10"/><text x="99.9404%" y="207.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (9 samples, 0.02%)</title><rect x="99.6926%" y="181" width="0.0193%" height="15" fill="rgb(210,16,53)" fg:x="46371" fg:w="9"/><text x="99.9426%" y="191.50"></text></g><g><title>client`std::io::stdio::impl$11::write_all (13 samples, 0.03%)</title><rect x="99.6861%" y="309" width="0.0279%" height="15" fill="rgb(235,124,12)" fg:x="46368" fg:w="13"/><text x="99.9361%" y="319.50"></text></g><g><title>client`std::io::stdio::impl$12::write_all (13 samples, 0.03%)</title><rect x="99.6861%" y="293" width="0.0279%" height="15" fill="rgb(224,169,11)" fg:x="46368" fg:w="13"/><text x="99.9361%" y="303.50"></text></g><g><title>client`std::io::stdio::impl$13::write_all (13 samples, 0.03%)</title><rect x="99.6861%" y="277" width="0.0279%" height="15" fill="rgb(250,166,2)" fg:x="46368" fg:w="13"/><text x="99.9361%" y="287.50"></text></g><g><title>client`std::io::Write::write_all (13 samples, 0.03%)</title><rect x="99.6861%" y="261" width="0.0279%" height="15" fill="rgb(242,216,29)" fg:x="46368" fg:w="13"/><text x="99.9361%" y="271.50"></text></g><g><title>client`std::sys::windows::stdio::write (13 samples, 0.03%)</title><rect x="99.6861%" y="245" width="0.0279%" height="15" fill="rgb(230,116,27)" fg:x="46368" fg:w="13"/><text x="99.9361%" y="255.50"></text></g><g><title>client`std::sys::windows::stdio::write_valid_utf8_to_console (11 samples, 0.02%)</title><rect x="99.6904%" y="229" width="0.0236%" height="15" fill="rgb(228,99,48)" fg:x="46370" fg:w="11"/><text x="99.9404%" y="239.50"></text></g><g><title>client`tracing_core::event::Event::dispatch (19 samples, 0.04%)</title><rect x="99.6861%" y="373" width="0.0408%" height="15" fill="rgb(253,11,6)" fg:x="46368" fg:w="19"/><text x="99.9361%" y="383.50"></text></g><g><title>client`tracing_core::dispatcher::get_default&lt;tuple$ (19 samples, 0.04%)</title><rect x="99.6861%" y="357" width="0.0408%" height="15" fill="rgb(247,143,39)" fg:x="46368" fg:w="19"/><text x="99.9361%" y="367.50"></text></g><g><title>client`tracing_subscriber::fmt::impl$2::event&lt;tracing_subscriber::fmt::format::DefaultFields,tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,tracing_subscriber::fmt::time::SystemTime&gt;,tracing_subscriber::filter::env::EnvFilter,std::io::stdio::Stdout (*) (19 samples, 0.04%)</title><rect x="99.6861%" y="341" width="0.0408%" height="15" fill="rgb(236,97,10)" fg:x="46368" fg:w="19"/><text x="99.9361%" y="351.50"></text></g><g><title>client`std::thread::local::LocalKey&lt;core::cell::RefCell&lt;alloc::string::String&gt; &gt;::with&lt;core::cell::RefCell&lt;alloc::string::String&gt;,tracing_subscriber::fmt::fmt_layer::impl$11::on_event::closure_env$0&lt;tracing_subscriber::registry::sharded::Registry,tracing_subscriber::fmt::format::DefaultFields,tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,tracing_subscriber::fmt::time::SystemTime&gt;,std::io::stdio::Stdout (*)()&gt;,tuple$ (19 samples, 0.04%)</title><rect x="99.6861%" y="325" width="0.0408%" height="15" fill="rgb(233,208,19)" fg:x="46368" fg:w="19"/><text x="99.9361%" y="335.50"></text></g><g><title>client`tracing_subscriber::fmt::format::impl$6::format_event (6 samples, 0.01%)</title><rect x="99.7141%" y="309" width="0.0129%" height="15" fill="rgb(216,164,2)" fg:x="46381" fg:w="6"/><text x="99.9641%" y="319.50"></text></g><g><title>client`regex::compile::Compiler::c (5 samples, 0.01%)</title><rect x="99.7313%" y="85" width="0.0107%" height="15" fill="rgb(220,129,5)" fg:x="46389" fg:w="5"/><text x="99.9813%" y="95.50"></text></g><g><title>client`regex::compile::Compiler::c (5 samples, 0.01%)</title><rect x="99.7313%" y="69" width="0.0107%" height="15" fill="rgb(242,17,10)" fg:x="46389" fg:w="5"/><text x="99.9813%" y="79.50"></text></g><g><title>client`regex::compile::Compiler::c_repeat_one_or_more (5 samples, 0.01%)</title><rect x="99.7313%" y="53" width="0.0107%" height="15" fill="rgb(242,107,0)" fg:x="46389" fg:w="5"/><text x="99.9813%" y="63.50"></text></g><g><title>client`regex::compile::Compiler::c_class (5 samples, 0.01%)</title><rect x="99.7313%" y="37" width="0.0107%" height="15" fill="rgb(251,28,31)" fg:x="46389" fg:w="5"/><text x="99.9813%" y="47.50"></text></g><g><title>client`regex::compile::Compiler::c (9 samples, 0.02%)</title><rect x="99.7313%" y="149" width="0.0193%" height="15" fill="rgb(233,223,10)" fg:x="46389" fg:w="9"/><text x="99.9813%" y="159.50"></text></g><g><title>client`regex::compile::Compiler::c (9 samples, 0.02%)</title><rect x="99.7313%" y="133" width="0.0193%" height="15" fill="rgb(215,21,27)" fg:x="46389" fg:w="9"/><text x="99.9813%" y="143.50"></text></g><g><title>client`regex::compile::Compiler::c (9 samples, 0.02%)</title><rect x="99.7313%" y="117" width="0.0193%" height="15" fill="rgb(232,23,21)" fg:x="46389" fg:w="9"/><text x="99.9813%" y="127.50"></text></g><g><title>client`regex::compile::Compiler::c_repeat_range (9 samples, 0.02%)</title><rect x="99.7313%" y="101" width="0.0193%" height="15" fill="rgb(244,5,23)" fg:x="46389" fg:w="9"/><text x="99.9813%" y="111.50"></text></g><g><title>client`regex::compile::Compiler::compile (11 samples, 0.02%)</title><rect x="99.7313%" y="165" width="0.0236%" height="15" fill="rgb(226,81,46)" fg:x="46389" fg:w="11"/><text x="99.9813%" y="175.50"></text></g><g><title>client`client::main::async_block$0 (46,357 samples, 99.66%)</title><rect x="0.1032%" y="389" width="99.6625%" height="15" fill="rgb(247,70,30)" fg:x="48" fg:w="46357"/><text x="0.3532%" y="399.50">client`client::main::async_block$0</text></g><g><title>client`tracing_subscriber::fmt::init (18 samples, 0.04%)</title><rect x="99.7270%" y="373" width="0.0387%" height="15" fill="rgb(212,68,19)" fg:x="46387" fg:w="18"/><text x="99.9770%" y="383.50"></text></g><g><title>client`tracing_subscriber::fmt::try_init (18 samples, 0.04%)</title><rect x="99.7270%" y="357" width="0.0387%" height="15" fill="rgb(240,187,13)" fg:x="46387" fg:w="18"/><text x="99.9770%" y="367.50"></text></g><g><title>client`tracing_subscriber::filter::env::builder::Builder::from_env_lossy (18 samples, 0.04%)</title><rect x="99.7270%" y="341" width="0.0387%" height="15" fill="rgb(223,113,26)" fg:x="46387" fg:w="18"/><text x="99.9770%" y="351.50"></text></g><g><title>client`alloc::vec::spec_from_iter::impl$0::from_iter&lt;tracing_subscriber::filter::env::directive::Directive,core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::filter::Filter&lt;core::str::iter::Split&lt;char&gt;,tracing_subscriber::filter::env::builder::impl$0::parse_lossy::closure_env$0&lt;alloc::string::String&gt; &gt;,tracing_subscriber::filter::env::builder::impl$0::parse_lossy::closure_env$1 (18 samples, 0.04%)</title><rect x="99.7270%" y="325" width="0.0387%" height="15" fill="rgb(206,192,2)" fg:x="46387" fg:w="18"/><text x="99.9770%" y="335.50"></text></g><g><title>client`core::iter::adapters::filter_map::impl$2::next&lt;tracing_subscriber::filter::env::directive::Directive,core::iter::adapters::filter::Filter&lt;core::str::iter::Split&lt;char&gt;,tracing_subscriber::filter::env::builder::impl$0::parse_lossy::closure_env$0&lt;alloc::string::String&gt; &gt;,tracing_subscriber::filter::env::builder::impl$0::parse_lossy::closure_env$1 (18 samples, 0.04%)</title><rect x="99.7270%" y="309" width="0.0387%" height="15" fill="rgb(241,108,4)" fg:x="46387" fg:w="18"/><text x="99.9770%" y="319.50"></text></g><g><title>client`core::ops::function::impls::impl$3::call_mut&lt;tuple$&lt;str&gt;,tracing_subscriber::filter::env::builder::impl$0::parse_lossy::closure_env$1 (18 samples, 0.04%)</title><rect x="99.7270%" y="293" width="0.0387%" height="15" fill="rgb(247,173,49)" fg:x="46387" fg:w="18"/><text x="99.9770%" y="303.50"></text></g><g><title>client`tracing_subscriber::filter::env::directive::Directive::parse (18 samples, 0.04%)</title><rect x="99.7270%" y="277" width="0.0387%" height="15" fill="rgb(224,114,35)" fg:x="46387" fg:w="18"/><text x="99.9770%" y="287.50"></text></g><g><title>client`once_cell::imp::OnceCell&lt;regex::re_unicode::Regex&gt;::initialize&lt;regex::re_unicode::Regex,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;regex::re_unicode::Regex,once_cell::sync::impl$11::force::closure_env$0&lt;regex::re_unicode::Regex,regex::re_unicode::Regex (*)()&gt; &gt;,enum$ (17 samples, 0.04%)</title><rect x="99.7291%" y="261" width="0.0365%" height="15" fill="rgb(245,159,27)" fg:x="46388" fg:w="17"/><text x="99.9791%" y="271.50"></text></g><g><title>client`once_cell::imp::initialize_or_wait (17 samples, 0.04%)</title><rect x="99.7291%" y="245" width="0.0365%" height="15" fill="rgb(245,172,44)" fg:x="46388" fg:w="17"/><text x="99.9791%" y="255.50"></text></g><g><title>client`once_cell::imp::impl$4::initialize::closure$0&lt;regex::re_unicode::Regex,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;regex::re_unicode::Regex,once_cell::sync::impl$11::force::closure_env$0&lt;regex::re_unicode::Regex,regex::re_unicode::Regex (*)()&gt; &gt;,enum$ (17 samples, 0.04%)</title><rect x="99.7291%" y="229" width="0.0365%" height="15" fill="rgb(236,23,11)" fg:x="46388" fg:w="17"/><text x="99.9791%" y="239.50"></text></g><g><title>client`core::ops::function::FnOnce::call_once&lt;tracing_subscriber::filter::env::directive::impl$0::parse::DIRECTIVE_RE::closure_env$0,tuple$ (17 samples, 0.04%)</title><rect x="99.7291%" y="213" width="0.0365%" height="15" fill="rgb(205,117,38)" fg:x="46388" fg:w="17"/><text x="99.9791%" y="223.50"></text></g><g><title>client`regex::re_unicode::Regex::new (17 samples, 0.04%)</title><rect x="99.7291%" y="197" width="0.0365%" height="15" fill="rgb(237,72,25)" fg:x="46388" fg:w="17"/><text x="99.9791%" y="207.50"></text></g><g><title>client`regex::exec::ExecBuilder::build (17 samples, 0.04%)</title><rect x="99.7291%" y="181" width="0.0365%" height="15" fill="rgb(244,70,9)" fg:x="46388" fg:w="17"/><text x="99.9791%" y="191.50"></text></g><g><title>client`std::thread::local::LocalKey&lt;core::cell::Cell&lt;tokio::coop::Budget&gt; &gt;::with&lt;core::cell::Cell&lt;tokio::coop::Budget&gt;,tokio::coop::with_budget::closure_env$0&lt;enum$&lt;core::task::poll::Poll&lt;enum$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;std::error::Error,core::marker::Send,core::marker::Sync&gt;,alloc::alloc::Global&gt; &gt;, 1, 18446744073709551615, Err&gt; &gt; &gt;,tokio::park::thread::impl$5::block_on::closure_env$0&lt;core::future::from_generator::GenFuture&lt;enum$&lt;client::main::async_block_env$0&gt; &gt; &gt; &gt;,enum$&lt;core::task::poll::Poll&lt;enum$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$ (46,366 samples, 99.68%)</title><rect x="0.0924%" y="405" width="99.6818%" height="15" fill="rgb(217,125,39)" fg:x="43" fg:w="46366"/><text x="0.3424%" y="415.50">client`std::thread::local::LocalKey&lt;core::cell::Cell&lt;tokio::coop::Budget&gt; &gt;::with&lt;core::cell::Cell&lt;tokio::coop::Budget&gt;,tokio::coop::with_budget::closure_env$0&lt;enum$&lt;..</text></g><g><title>client`tokio::runtime::Runtime::block_on&lt;core::future::from_generator::GenFuture&lt;enum$ (46,377 samples, 99.71%)</title><rect x="0.0838%" y="453" width="99.7055%" height="15" fill="rgb(235,36,10)" fg:x="39" fg:w="46377"/><text x="0.3338%" y="463.50">client`tokio::runtime::Runtime::block_on&lt;core::future::from_generator::GenFuture&lt;enum$</text></g><g><title>client`tokio::runtime::thread_pool::ThreadPool::block_on&lt;core::future::from_generator::GenFuture&lt;enum$ (46,377 samples, 99.71%)</title><rect x="0.0838%" y="437" width="99.7055%" height="15" fill="rgb(251,123,47)" fg:x="39" fg:w="46377"/><text x="0.3338%" y="447.50">client`tokio::runtime::thread_pool::ThreadPool::block_on&lt;core::future::from_generator::GenFuture&lt;enum$</text></g><g><title>client`tokio::park::thread::CachedParkThread::block_on&lt;core::future::from_generator::GenFuture&lt;enum$ (46,377 samples, 99.71%)</title><rect x="0.0838%" y="421" width="99.7055%" height="15" fill="rgb(221,13,13)" fg:x="39" fg:w="46377"/><text x="0.3338%" y="431.50">client`tokio::park::thread::CachedParkThread::block_on&lt;core::future::from_generator::GenFuture&lt;enum$</text></g><g><title>client`tokio::park::thread::impl$6::park (7 samples, 0.02%)</title><rect x="99.7743%" y="405" width="0.0150%" height="15" fill="rgb(238,131,9)" fg:x="46409" fg:w="7"/><text x="100.0243%" y="415.50"></text></g><g><title>client`tokio::park::thread::Inner::park (5 samples, 0.01%)</title><rect x="99.7786%" y="389" width="0.0107%" height="15" fill="rgb(211,50,8)" fg:x="46411" fg:w="5"/><text x="100.0286%" y="399.50"></text></g><g><title>client`tokio::runtime::blocking::pool::BlockingPool::new (5 samples, 0.01%)</title><rect x="99.7915%" y="437" width="0.0107%" height="15" fill="rgb(245,182,24)" fg:x="46417" fg:w="5"/><text x="100.0415%" y="447.50"></text></g><g><title>client`std::thread::Builder::spawn&lt;tokio::runtime::blocking::pool::impl$4::spawn_thread::closure_env$0,tuple$ (6 samples, 0.01%)</title><rect x="99.8065%" y="389" width="0.0129%" height="15" fill="rgb(242,14,37)" fg:x="46424" fg:w="6"/><text x="100.0565%" y="399.50"></text></g><g><title>client`std::sys::windows::thread::Thread::new (6 samples, 0.01%)</title><rect x="99.8065%" y="373" width="0.0129%" height="15" fill="rgb(246,228,12)" fg:x="46424" fg:w="6"/><text x="100.0565%" y="383.50"></text></g><g><title>KERNEL32`CreateThread (6 samples, 0.01%)</title><rect x="99.8065%" y="357" width="0.0129%" height="15" fill="rgb(213,55,15)" fg:x="46424" fg:w="6"/><text x="100.0565%" y="367.50"></text></g><g><title>KERNELBASE`CreateRemoteThreadEx (6 samples, 0.01%)</title><rect x="99.8065%" y="341" width="0.0129%" height="15" fill="rgb(209,9,3)" fg:x="46424" fg:w="6"/><text x="100.0565%" y="351.50"></text></g><g><title>ntdll`NtCreateThreadEx (6 samples, 0.01%)</title><rect x="99.8065%" y="325" width="0.0129%" height="15" fill="rgb(230,59,30)" fg:x="46424" fg:w="6"/><text x="100.0565%" y="335.50"></text></g><g><title>client`main (46,394 samples, 99.74%)</title><rect x="0.0795%" y="533" width="99.7420%" height="15" fill="rgb(209,121,21)" fg:x="37" fg:w="46394"/><text x="0.3295%" y="543.50">client`main</text></g><g><title>client`std::rt::lang_start_internal (46,394 samples, 99.74%)</title><rect x="0.0795%" y="517" width="99.7420%" height="15" fill="rgb(220,109,13)" fg:x="37" fg:w="46394"/><text x="0.3295%" y="527.50">client`std::rt::lang_start_internal</text></g><g><title>client`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;enum$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;std::error::Error,core::marker::Send,core::marker::Sync&gt;,alloc::alloc::Global&gt; &gt;, 1, 18446744073709551615, Err&gt; &gt;,tuple$ (46,394 samples, 99.74%)</title><rect x="0.0795%" y="501" width="99.7420%" height="15" fill="rgb(232,18,1)" fg:x="37" fg:w="46394"/><text x="0.3295%" y="511.50">client`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;enum$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;std::error::Error,core::mar..</text></g><g><title>client`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;enum$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;std::error::Error,core::marker::Send,core::marker::Sync&gt;,alloc::alloc::Global&gt; &gt;, 1, 18446744073709551615, Err&gt; (*)(),enum$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$ (46,394 samples, 99.74%)</title><rect x="0.0795%" y="485" width="99.7420%" height="15" fill="rgb(215,41,42)" fg:x="37" fg:w="46394"/><text x="0.3295%" y="495.50">client`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;enum$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;std::error::Error,core::marker::Send,core::m..</text></g><g><title>client`client::main (46,394 samples, 99.74%)</title><rect x="0.0795%" y="469" width="99.7420%" height="15" fill="rgb(224,123,36)" fg:x="37" fg:w="46394"/><text x="0.3295%" y="479.50">client`client::main</text></g><g><title>client`tokio::runtime::builder::Builder::build (15 samples, 0.03%)</title><rect x="99.7893%" y="453" width="0.0322%" height="15" fill="rgb(240,125,3)" fg:x="46416" fg:w="15"/><text x="100.0393%" y="463.50"></text></g><g><title>client`tokio::runtime::thread_pool::worker::Launch::launch (9 samples, 0.02%)</title><rect x="99.8022%" y="437" width="0.0193%" height="15" fill="rgb(205,98,50)" fg:x="46422" fg:w="9"/><text x="100.0522%" y="447.50"></text></g><g><title>client`tokio::runtime::blocking::pool::spawn_blocking&lt;tokio::runtime::thread_pool::worker::impl$0::launch::closure_env$0,tuple$ (9 samples, 0.02%)</title><rect x="99.8022%" y="421" width="0.0193%" height="15" fill="rgb(205,185,37)" fg:x="46422" fg:w="9"/><text x="100.0522%" y="431.50"></text></g><g><title>client`tokio::runtime::blocking::pool::Spawner::spawn (9 samples, 0.02%)</title><rect x="99.8022%" y="405" width="0.0193%" height="15" fill="rgb(238,207,15)" fg:x="46422" fg:w="9"/><text x="100.0522%" y="415.50"></text></g><g><title>ucrtbase`exit (7 samples, 0.02%)</title><rect x="99.8216%" y="533" width="0.0150%" height="15" fill="rgb(213,199,42)" fg:x="46431" fg:w="7"/><text x="100.0716%" y="543.50"></text></g><g><title>ucrtbase`exit (7 samples, 0.02%)</title><rect x="99.8216%" y="517" width="0.0150%" height="15" fill="rgb(235,201,11)" fg:x="46431" fg:w="7"/><text x="100.0716%" y="527.50"></text></g><g><title>ucrtbase`crt_atexit (6 samples, 0.01%)</title><rect x="99.8237%" y="501" width="0.0129%" height="15" fill="rgb(207,46,11)" fg:x="46432" fg:w="6"/><text x="100.0737%" y="511.50"></text></g><g><title>ucrtbase`_stdio_common_vfwprintf (6 samples, 0.01%)</title><rect x="99.8237%" y="485" width="0.0129%" height="15" fill="rgb(241,35,35)" fg:x="46432" fg:w="6"/><text x="100.0737%" y="495.50"></text></g><g><title>KERNELBASE`LoadLibraryExW (6 samples, 0.01%)</title><rect x="99.8237%" y="469" width="0.0129%" height="15" fill="rgb(243,32,47)" fg:x="46432" fg:w="6"/><text x="100.0737%" y="479.50"></text></g><g><title>ntdll`LdrLoadDll (6 samples, 0.01%)</title><rect x="99.8237%" y="453" width="0.0129%" height="15" fill="rgb(247,202,23)" fg:x="46432" fg:w="6"/><text x="100.0737%" y="463.50"></text></g><g><title>ntdll`RtlDosPathNameToNtPathName_U (6 samples, 0.01%)</title><rect x="99.8237%" y="437" width="0.0129%" height="15" fill="rgb(219,102,11)" fg:x="46432" fg:w="6"/><text x="100.0737%" y="447.50"></text></g><g><title>ntdll`RtlGetFullPathName_UstrEx (6 samples, 0.01%)</title><rect x="99.8237%" y="421" width="0.0129%" height="15" fill="rgb(243,110,44)" fg:x="46432" fg:w="6"/><text x="100.0737%" y="431.50"></text></g><g><title>ntdll`RtlUnlockHeap (5 samples, 0.01%)</title><rect x="99.8259%" y="405" width="0.0107%" height="15" fill="rgb(222,74,54)" fg:x="46433" fg:w="5"/><text x="100.0759%" y="415.50"></text></g><g><title>ntdll`RtlUnlockHeap (5 samples, 0.01%)</title><rect x="99.8259%" y="389" width="0.0107%" height="15" fill="rgb(216,99,12)" fg:x="46433" fg:w="5"/><text x="100.0759%" y="399.50"></text></g><g><title>ntdll`RtlUnlockHeap (5 samples, 0.01%)</title><rect x="99.8259%" y="373" width="0.0107%" height="15" fill="rgb(226,22,26)" fg:x="46433" fg:w="5"/><text x="100.0759%" y="383.50"></text></g><g><title>client`__scrt_common_main_seh (46,402 samples, 99.76%)</title><rect x="0.0795%" y="549" width="99.7592%" height="15" fill="rgb(217,163,10)" fg:x="37" fg:w="46402"/><text x="0.3295%" y="559.50">client`__scrt_common_main_seh</text></g><g><title>KERNELBASE`GetQueuedCompletionStatusEx (10 samples, 0.02%)</title><rect x="99.8646%" y="293" width="0.0215%" height="15" fill="rgb(213,25,53)" fg:x="46451" fg:w="10"/><text x="100.1146%" y="303.50"></text></g><g><title>ntdll`ZwRemoveIoCompletionEx (9 samples, 0.02%)</title><rect x="99.8667%" y="277" width="0.0193%" height="15" fill="rgb(252,105,26)" fg:x="46452" fg:w="9"/><text x="100.1167%" y="287.50"></text></g><g><title>client`mio::poll::Poll::poll (19 samples, 0.04%)</title><rect x="99.8624%" y="325" width="0.0408%" height="15" fill="rgb(220,39,43)" fg:x="46450" fg:w="19"/><text x="100.1124%" y="335.50"></text></g><g><title>client`mio::sys::windows::selector::SelectorInner::select2 (18 samples, 0.04%)</title><rect x="99.8646%" y="309" width="0.0387%" height="15" fill="rgb(229,68,48)" fg:x="46451" fg:w="18"/><text x="100.1146%" y="319.50"></text></g><g><title>client`mio::sys::windows::selector::SelectorInner::update_sockets_events (8 samples, 0.02%)</title><rect x="99.8861%" y="293" width="0.0172%" height="15" fill="rgb(252,8,32)" fg:x="46461" fg:w="8"/><text x="100.1361%" y="303.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (8 samples, 0.02%)</title><rect x="99.8861%" y="277" width="0.0172%" height="15" fill="rgb(223,20,43)" fg:x="46461" fg:w="8"/><text x="100.1361%" y="287.50"></text></g><g><title>client`tokio::io::driver::Driver::turn (23 samples, 0.05%)</title><rect x="99.8624%" y="341" width="0.0494%" height="15" fill="rgb(229,81,49)" fg:x="46450" fg:w="23"/><text x="100.1124%" y="351.50"></text></g><g><title>client`tokio::runtime::thread_pool::worker::Context::park_timeout (26 samples, 0.06%)</title><rect x="99.8581%" y="389" width="0.0559%" height="15" fill="rgb(236,28,36)" fg:x="46448" fg:w="26"/><text x="100.1081%" y="399.50"></text></g><g><title>client`tokio::runtime::thread_pool::park::impl$2::park (26 samples, 0.06%)</title><rect x="99.8581%" y="373" width="0.0559%" height="15" fill="rgb(249,185,26)" fg:x="46448" fg:w="26"/><text x="100.1081%" y="383.50"></text></g><g><title>client`tokio::time::driver::Driver&lt;enum$&lt;tokio::park::either::Either&lt;tokio::io::driver::Driver,tokio::park::thread::ParkThread&gt; &gt; &gt;::park_internal&lt;enum$&lt;tokio::park::either::Either (24 samples, 0.05%)</title><rect x="99.8624%" y="357" width="0.0516%" height="15" fill="rgb(249,174,33)" fg:x="46450" fg:w="24"/><text x="100.1124%" y="367.50"></text></g><g><title>client`tokio::runtime::task::harness::Harness&lt;core::future::from_generator::GenFuture&lt;enum$&lt;client::main::async_block$0::async_block_env$0&gt; &gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt; &gt;::poll&lt;core::future::from_generator::GenFuture&lt;enum$&lt;client::main::async_block$0::async_block_env$0&gt; &gt;,alloc::sync::Arc (14 samples, 0.03%)</title><rect x="99.9140%" y="357" width="0.0301%" height="15" fill="rgb(233,201,37)" fg:x="46474" fg:w="14"/><text x="100.1640%" y="367.50"></text></g><g><title>client`std::panicking::try&lt;enum$&lt;core::task::poll::Poll&lt;tuple$&lt;&gt; &gt; &gt;,core::panic::unwind_safe::AssertUnwindSafe&lt;tokio::runtime::task::harness::poll_future::closure_env$0&lt;core::future::from_generator::GenFuture&lt;enum$&lt;client::main::async_block$0::async_block_env$0&gt; &gt;,alloc::sync::Arc (14 samples, 0.03%)</title><rect x="99.9140%" y="341" width="0.0301%" height="15" fill="rgb(221,78,26)" fg:x="46474" fg:w="14"/><text x="100.1640%" y="351.50"></text></g><g><title>client`core::future::from_generator::impl$1::poll&lt;enum$ (14 samples, 0.03%)</title><rect x="99.9140%" y="325" width="0.0301%" height="15" fill="rgb(250,127,30)" fg:x="46474" fg:w="14"/><text x="100.1640%" y="335.50"></text></g><g><title>client`tracing_core::event::Event::dispatch (8 samples, 0.02%)</title><rect x="99.9269%" y="309" width="0.0172%" height="15" fill="rgb(230,49,44)" fg:x="46480" fg:w="8"/><text x="100.1769%" y="319.50"></text></g><g><title>client`tracing_core::dispatcher::get_default&lt;tuple$ (8 samples, 0.02%)</title><rect x="99.9269%" y="293" width="0.0172%" height="15" fill="rgb(229,67,23)" fg:x="46480" fg:w="8"/><text x="100.1769%" y="303.50"></text></g><g><title>client`tracing_subscriber::fmt::impl$2::event&lt;tracing_subscriber::fmt::format::DefaultFields,tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,tracing_subscriber::fmt::time::SystemTime&gt;,tracing_subscriber::filter::env::EnvFilter,std::io::stdio::Stdout (*) (8 samples, 0.02%)</title><rect x="99.9269%" y="277" width="0.0172%" height="15" fill="rgb(249,83,47)" fg:x="46480" fg:w="8"/><text x="100.1769%" y="287.50"></text></g><g><title>client`std::thread::local::LocalKey&lt;core::cell::RefCell&lt;alloc::string::String&gt; &gt;::with&lt;core::cell::RefCell&lt;alloc::string::String&gt;,tracing_subscriber::fmt::fmt_layer::impl$11::on_event::closure_env$0&lt;tracing_subscriber::registry::sharded::Registry,tracing_subscriber::fmt::format::DefaultFields,tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,tracing_subscriber::fmt::time::SystemTime&gt;,std::io::stdio::Stdout (*)()&gt;,tuple$ (8 samples, 0.02%)</title><rect x="99.9269%" y="261" width="0.0172%" height="15" fill="rgb(215,43,3)" fg:x="46480" fg:w="8"/><text x="100.1769%" y="271.50"></text></g><g><title>client`tokio::io::util::write_buf::impl$0::poll (5 samples, 0.01%)</title><rect x="99.9441%" y="309" width="0.0107%" height="15" fill="rgb(238,154,13)" fg:x="46488" fg:w="5"/><text x="100.1941%" y="319.50"></text></g><g><title>client`tokio::net::tcp::split_owned::impl$6::poll_write (5 samples, 0.01%)</title><rect x="99.9441%" y="293" width="0.0107%" height="15" fill="rgb(219,56,2)" fg:x="46488" fg:w="5"/><text x="100.1941%" y="303.50"></text></g><g><title>client`tokio::io::driver::registration::Registration::poll_write_io&lt;usize,tokio::io::poll_evented::impl$6::poll_write::closure_env$0 (5 samples, 0.01%)</title><rect x="99.9441%" y="277" width="0.0107%" height="15" fill="rgb(233,0,4)" fg:x="46488" fg:w="5"/><text x="100.1941%" y="287.50"></text></g><g><title>client`tokio::runtime::task::harness::Harness&lt;core::future::from_generator::GenFuture&lt;enum$&lt;client::main::async_block$0::async_block_env$5&gt; &gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt; &gt;::poll&lt;core::future::from_generator::GenFuture&lt;enum$&lt;client::main::async_block$0::async_block_env$5&gt; &gt;,alloc::sync::Arc (13 samples, 0.03%)</title><rect x="99.9441%" y="357" width="0.0279%" height="15" fill="rgb(235,30,7)" fg:x="46488" fg:w="13"/><text x="100.1941%" y="367.50"></text></g><g><title>client`std::panicking::try&lt;enum$&lt;core::task::poll::Poll&lt;tuple$&lt;&gt; &gt; &gt;,core::panic::unwind_safe::AssertUnwindSafe&lt;tokio::runtime::task::harness::poll_future::closure_env$0&lt;core::future::from_generator::GenFuture&lt;enum$&lt;client::main::async_block$0::async_block_env$5&gt; &gt;,alloc::sync::Arc (13 samples, 0.03%)</title><rect x="99.9441%" y="341" width="0.0279%" height="15" fill="rgb(250,79,13)" fg:x="46488" fg:w="13"/><text x="100.1941%" y="351.50"></text></g><g><title>client`core::future::from_generator::impl$1::poll&lt;enum$ (13 samples, 0.03%)</title><rect x="99.9441%" y="325" width="0.0279%" height="15" fill="rgb(211,146,34)" fg:x="46488" fg:w="13"/><text x="100.1941%" y="335.50"></text></g><g><title>client`tracing_core::event::Event::dispatch (6 samples, 0.01%)</title><rect x="99.9592%" y="309" width="0.0129%" height="15" fill="rgb(228,22,38)" fg:x="46495" fg:w="6"/><text x="100.2092%" y="319.50"></text></g><g><title>client`tracing_core::dispatcher::get_default&lt;tuple$ (6 samples, 0.01%)</title><rect x="99.9592%" y="293" width="0.0129%" height="15" fill="rgb(235,168,5)" fg:x="46495" fg:w="6"/><text x="100.2092%" y="303.50"></text></g><g><title>client`tracing_subscriber::fmt::impl$2::event&lt;tracing_subscriber::fmt::format::DefaultFields,tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,tracing_subscriber::fmt::time::SystemTime&gt;,tracing_subscriber::filter::env::EnvFilter,std::io::stdio::Stdout (*) (6 samples, 0.01%)</title><rect x="99.9592%" y="277" width="0.0129%" height="15" fill="rgb(221,155,16)" fg:x="46495" fg:w="6"/><text x="100.2092%" y="287.50"></text></g><g><title>client`std::thread::local::LocalKey&lt;core::cell::RefCell&lt;alloc::string::String&gt; &gt;::with&lt;core::cell::RefCell&lt;alloc::string::String&gt;,tracing_subscriber::fmt::fmt_layer::impl$11::on_event::closure_env$0&lt;tracing_subscriber::registry::sharded::Registry,tracing_subscriber::fmt::format::DefaultFields,tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,tracing_subscriber::fmt::time::SystemTime&gt;,std::io::stdio::Stdout (*)()&gt;,tuple$ (6 samples, 0.01%)</title><rect x="99.9592%" y="261" width="0.0129%" height="15" fill="rgb(215,215,53)" fg:x="46495" fg:w="6"/><text x="100.2092%" y="271.50"></text></g><g><title>client`std::sys::windows::thread::impl$0::new::thread_start (66 samples, 0.14%)</title><rect x="99.8388%" y="549" width="0.1419%" height="15" fill="rgb(223,4,10)" fg:x="46439" fg:w="66"/><text x="100.0888%" y="559.50"></text></g><g><title>client`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;tokio::runtime::blocking::pool::impl$4::spawn_thread::closure_env$0,tuple$&lt;&gt; &gt;,tuple$ (66 samples, 0.14%)</title><rect x="99.8388%" y="533" width="0.1419%" height="15" fill="rgb(234,103,6)" fg:x="46439" fg:w="66"/><text x="100.0888%" y="543.50"></text></g><g><title>client`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;tokio::runtime::blocking::pool::impl$4::spawn_thread::closure_env$0,tuple$ (66 samples, 0.14%)</title><rect x="99.8388%" y="517" width="0.1419%" height="15" fill="rgb(227,97,0)" fg:x="46439" fg:w="66"/><text x="100.0888%" y="527.50"></text></g><g><title>client`tokio::runtime::blocking::pool::Inner::run (66 samples, 0.14%)</title><rect x="99.8388%" y="501" width="0.1419%" height="15" fill="rgb(234,150,53)" fg:x="46439" fg:w="66"/><text x="100.0888%" y="511.50"></text></g><g><title>client`tokio::runtime::task::harness::Harness&lt;tokio::runtime::blocking::task::BlockingTask&lt;tokio::runtime::thread_pool::worker::impl$0::launch::closure_env$0&gt;,tokio::runtime::blocking::schedule::NoopSchedule&gt;::poll&lt;tokio::runtime::blocking::task::BlockingTask (63 samples, 0.14%)</title><rect x="99.8452%" y="485" width="0.1354%" height="15" fill="rgb(228,201,54)" fg:x="46442" fg:w="63"/><text x="100.0952%" y="495.50"></text></g><g><title>client`std::panicking::try&lt;enum$&lt;core::task::poll::Poll&lt;tuple$&lt;&gt; &gt; &gt;,core::panic::unwind_safe::AssertUnwindSafe&lt;tokio::runtime::task::harness::poll_future::closure_env$0&lt;tokio::runtime::blocking::task::BlockingTask (63 samples, 0.14%)</title><rect x="99.8452%" y="469" width="0.1354%" height="15" fill="rgb(222,22,37)" fg:x="46442" fg:w="63"/><text x="100.0952%" y="479.50"></text></g><g><title>client`tokio::loom::std::unsafe_cell::UnsafeCell&lt;enum$&lt;tokio::runtime::task::core::Stage&lt;tokio::runtime::blocking::task::BlockingTask&lt;tokio::runtime::thread_pool::worker::impl$0::launch::closure_env$0&gt; &gt; &gt; &gt;::with_mut&lt;enum$&lt;tokio::runtime::task::core::Stage&lt;tokio::runtime::blocking::task::BlockingTask&lt;tokio::runtime::thread_pool::worker::impl$0::launch::closure_env$0&gt; &gt; &gt;,enum$&lt;core::task::poll::Poll&lt;tuple$&lt;&gt; &gt; &gt;,tokio::runtime::task::core::impl$3::poll::closure_env$0&lt;tokio::runtime::blocking::task::BlockingTask (63 samples, 0.14%)</title><rect x="99.8452%" y="453" width="0.1354%" height="15" fill="rgb(237,53,32)" fg:x="46442" fg:w="63"/><text x="100.0952%" y="463.50"></text></g><g><title>client`tokio::runtime::thread_pool::worker::run (63 samples, 0.14%)</title><rect x="99.8452%" y="437" width="0.1354%" height="15" fill="rgb(233,25,53)" fg:x="46442" fg:w="63"/><text x="100.0952%" y="447.50"></text></g><g><title>client`tokio::macros::scoped_tls::ScopedKey&lt;tokio::runtime::thread_pool::worker::Context&gt;::set&lt;tokio::runtime::thread_pool::worker::Context,tokio::runtime::thread_pool::worker::run::closure_env$0,tuple$ (63 samples, 0.14%)</title><rect x="99.8452%" y="421" width="0.1354%" height="15" fill="rgb(210,40,34)" fg:x="46442" fg:w="63"/><text x="100.0952%" y="431.50"></text></g><g><title>client`tokio::runtime::thread_pool::worker::Context::run (63 samples, 0.14%)</title><rect x="99.8452%" y="405" width="0.1354%" height="15" fill="rgb(241,220,44)" fg:x="46442" fg:w="63"/><text x="100.0952%" y="415.50"></text></g><g><title>client`tokio::runtime::thread_pool::worker::Context::run_task (31 samples, 0.07%)</title><rect x="99.9140%" y="389" width="0.0666%" height="15" fill="rgb(235,28,35)" fg:x="46474" fg:w="31"/><text x="100.1640%" y="399.50"></text></g><g><title>client`std::thread::local::LocalKey&lt;core::cell::Cell&lt;tokio::coop::Budget&gt; &gt;::with&lt;core::cell::Cell&lt;tokio::coop::Budget&gt;,tokio::coop::with_budget::closure_env$0&lt;enum$&lt;core::result::Result&lt;alloc::boxed::Box&lt;tokio::runtime::thread_pool::worker::Core,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;, 1, 18446744073709551615, Ok&gt;,tokio::runtime::thread_pool::worker::impl$1::run_task::closure_env$0&gt;,enum$&lt;core::result::Result&lt;alloc::boxed::Box&lt;tokio::runtime::thread_pool::worker::Core,alloc::alloc::Global&gt;,tuple$ (31 samples, 0.07%)</title><rect x="99.9140%" y="373" width="0.0666%" height="15" fill="rgb(210,56,17)" fg:x="46474" fg:w="31"/><text x="100.1640%" y="383.50"></text></g><g><title>all (46,514 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="46514"/><text x="0.2500%" y="607.50"></text></g><g><title>ntdll`RtlUserThreadStart (46,480 samples, 99.93%)</title><rect x="0.0731%" y="581" width="99.9269%" height="15" fill="rgb(235,212,8)" fg:x="34" fg:w="46480"/><text x="0.3231%" y="591.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (46,477 samples, 99.92%)</title><rect x="0.0795%" y="565" width="99.9205%" height="15" fill="rgb(223,33,50)" fg:x="37" fg:w="46477"/><text x="0.3295%" y="575.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>ntdll`TpReleaseCleanupGroupMembers (6 samples, 0.01%)</title><rect x="99.9871%" y="549" width="0.0129%" height="15" fill="rgb(219,149,13)" fg:x="46508" fg:w="6"/><text x="100.2371%" y="559.50"></text></g><g><title>ntdll`TpAllocPool (6 samples, 0.01%)</title><rect x="99.9871%" y="533" width="0.0129%" height="15" fill="rgb(250,156,29)" fg:x="46508" fg:w="6"/><text x="100.2371%" y="543.50"></text></g><g><title>ntdll`RtlUnlockHeap (6 samples, 0.01%)</title><rect x="99.9871%" y="517" width="0.0129%" height="15" fill="rgb(216,193,19)" fg:x="46508" fg:w="6"/><text x="100.2371%" y="527.50"></text></g><g><title>ntdll`RtlUnlockHeap (6 samples, 0.01%)</title><rect x="99.9871%" y="501" width="0.0129%" height="15" fill="rgb(216,135,14)" fg:x="46508" fg:w="6"/><text x="100.2371%" y="511.50"></text></g></svg></svg>